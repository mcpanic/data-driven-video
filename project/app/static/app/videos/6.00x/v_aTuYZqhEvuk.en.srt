1
00:00:00,000 --> 00:00:00,820

2
00:00:00,820 --> 00:00:03,920
ERIC GRIMSON: Now that we've
added functions to our

3
00:00:03,920 --> 00:00:07,150
armamentarium of tools, we're
going to see that that gives

4
00:00:07,150 --> 00:00:10,100
us a lot of power in terms of
thinking about computational

5
00:00:10,100 --> 00:00:11,960
ways of tackling problems.

6
00:00:11,960 --> 00:00:15,580
Functions give us, as we said,
that ability to abstract, to

7
00:00:15,580 --> 00:00:18,810
capture a computation and then
wrap it up as if it were a

8
00:00:18,810 --> 00:00:22,440
primitive, gives the user the
ability to treat a function

9
00:00:22,440 --> 00:00:23,480
like a black box.

10
00:00:23,480 --> 00:00:26,480
You suppress the details and
you just use the contract,

11
00:00:26,480 --> 00:00:29,870
that specification that says,
if you give me things that

12
00:00:29,870 --> 00:00:32,740
satisfy certain constraints,
this function will give you

13
00:00:32,740 --> 00:00:35,720
back answers that meet
particular desires.

14
00:00:35,720 --> 00:00:37,350
That's great.

15
00:00:37,350 --> 00:00:39,800
But even functions can come
in different flavors.

16
00:00:39,800 --> 00:00:42,560
And there's some real power to
thinking about different ways

17
00:00:42,560 --> 00:00:45,280
of tackling a computational
problem.

18
00:00:45,280 --> 00:00:47,780
And I wanted to spend a little
bit of time in this section

19
00:00:47,780 --> 00:00:49,310
talking about that.

20
00:00:49,310 --> 00:00:51,430
Let's start with what
we've seen so far.

21
00:00:51,430 --> 00:00:54,650
We've really been using looping
constructs as our way

22
00:00:54,650 --> 00:00:55,570
of building algorithms.

23
00:00:55,570 --> 00:00:58,660
And those looping constructs,
things like while loop, a for

24
00:00:58,660 --> 00:01:02,630
loop, lead naturally to what we
would refer to as iterative

25
00:01:02,630 --> 00:01:03,230
algorithms.

26
00:01:03,230 --> 00:01:07,080
They iterate their way through
the loop, going over and over

27
00:01:07,080 --> 00:01:10,150
the same computation with
slight changes.

28
00:01:10,150 --> 00:01:13,110
And in particular, we can
think of an iterative

29
00:01:13,110 --> 00:01:16,530
algorithm as capturing
computation in a set of what

30
00:01:16,530 --> 00:01:18,440
we could call state variables.

31
00:01:18,440 --> 00:01:20,500
These are variables that
describe the state of the

32
00:01:20,500 --> 00:01:21,590
computation.

33
00:01:21,590 --> 00:01:25,010
And those variables update or
change their values on each

34
00:01:25,010 --> 00:01:26,900
iteration through the loop.

35
00:01:26,900 --> 00:01:29,110
Let's look at an example.

36
00:01:29,110 --> 00:01:31,480
So here's a simple
little example.

37
00:01:31,480 --> 00:01:33,990
Imagine that we want to do
multiplication, and we're

38
00:01:33,990 --> 00:01:36,840
going to do it just using
successive addition.

39
00:01:36,840 --> 00:01:38,240
Our computer only comes
with addition.

40
00:01:38,240 --> 00:01:40,170
It doesn't come with a
built in multiply.

41
00:01:40,170 --> 00:01:42,130
I know that's dumb, but
it gives us a simple

42
00:01:42,130 --> 00:01:43,990
example to deal with.

43
00:01:43,990 --> 00:01:46,690
If we wanted to do that, to do
multiplication by successive

44
00:01:46,690 --> 00:01:49,800
additions, then a simple way to
think about it is to say if

45
00:01:49,800 --> 00:01:52,840
we want to multiply a by b,
we're just going to add a to

46
00:01:52,840 --> 00:01:55,070
itself b times.

47
00:01:55,070 --> 00:01:57,300
And iteratively, what
does that mean?

48
00:01:57,300 --> 00:02:00,650
Literally, we could say
computation's going to be

49
00:02:00,650 --> 00:02:03,080
captured by two variables.

50
00:02:03,080 --> 00:02:05,110
One is the iteration number.

51
00:02:05,110 --> 00:02:08,430
Which time through
the loop am I at?

52
00:02:08,430 --> 00:02:11,020
That number, let's call it i,
arbitrarily, is going to

53
00:02:11,020 --> 00:02:12,960
start off at b.

54
00:02:12,960 --> 00:02:16,100
And the second thing we're
going to need is a state

55
00:02:16,100 --> 00:02:18,160
variable that captures
how many additions

56
00:02:18,160 --> 00:02:18,820
we've already done.

57
00:02:18,820 --> 00:02:20,120
What the result is so far.

58
00:02:20,120 --> 00:02:21,690
Let's just call it result.

59
00:02:21,690 --> 00:02:23,840
So that's the current state
of the computation.

60
00:02:23,840 --> 00:02:25,460
And that starts off at zero.

61
00:02:25,460 --> 00:02:28,010
So notice, each of these
state variables has an

62
00:02:28,010 --> 00:02:29,080
initialization.

63
00:02:29,080 --> 00:02:30,940
We started off somewhere.

64
00:02:30,940 --> 00:02:34,140
And then we think of the
computation as iterating

65
00:02:34,140 --> 00:02:36,950
through or updating those
state variables.

66
00:02:36,950 --> 00:02:39,570
And those update rules, in this
case, would be that on

67
00:02:39,570 --> 00:02:44,250
each iteration i, my iteration
number, is going to reduce by

68
00:02:44,250 --> 00:02:47,660
one and result, the thing
that's holding the

69
00:02:47,660 --> 00:02:50,820
computation, is going to take
the current value of result,

70
00:02:50,820 --> 00:02:53,870
add the value of a to it, and
that becomes the new value of

71
00:02:53,870 --> 00:02:55,470
that state variable.

72
00:02:55,470 --> 00:02:57,960
So these state variables have
the property that if I stop

73
00:02:57,960 --> 00:03:00,430
the computation at any
point, they tell me

74
00:03:00,430 --> 00:03:02,320
exactly where I am.

75
00:03:02,320 --> 00:03:05,590
And they have the property
that not only are they

76
00:03:05,590 --> 00:03:08,000
initialized, but at least one of
them will have a condition

77
00:03:08,000 --> 00:03:10,100
for telling me when
I can stop.

78
00:03:10,100 --> 00:03:12,860
And in this case, I'll stop
when the iteration count

79
00:03:12,860 --> 00:03:14,090
gets down to 0.

80
00:03:14,090 --> 00:03:16,820
I know I've done all the
things I need to do.

81
00:03:16,820 --> 00:03:19,680
We've seen examples like that,
but this idea of iteration is

82
00:03:19,680 --> 00:03:20,920
nicely captured.

83
00:03:20,920 --> 00:03:25,020
And if we put it into code, in
fact, we see something that

84
00:03:25,020 --> 00:03:27,300
very nicely builds on that.

85
00:03:27,300 --> 00:03:29,980
We initialize one
state variable.

86
00:03:29,980 --> 00:03:32,800
In this case, we're going to
just use the parameter passed

87
00:03:32,800 --> 00:03:34,000
in as the other state
variable.

88
00:03:34,000 --> 00:03:36,460
And it's initialized when
it is passed in.

89
00:03:36,460 --> 00:03:40,680
And then the loop simply
has updates.

90
00:03:40,680 --> 00:03:43,220
There's the updating of
those state variables.

91
00:03:43,220 --> 00:03:45,660
And let me make a simple comment
about this format,

92
00:03:45,660 --> 00:03:47,300
since we haven't
used it before.

93
00:03:47,300 --> 00:03:53,420
That format is the same as
saying let result be bound to

94
00:03:53,420 --> 00:03:57,172
result plus a.

95
00:03:57,172 --> 00:04:02,370
And this one is saying let
b be bound to b minus 1.

96
00:04:02,370 --> 00:04:04,590
It's simple, little shorthand
for doing that kind of

97
00:04:04,590 --> 00:04:05,970
computation.

98
00:04:05,970 --> 00:04:07,400
And of course, when I'm
done, I'm going

99
00:04:07,400 --> 00:04:10,040
to return the result.

100
00:04:10,040 --> 00:04:11,640
We've seen these kinds
of examples before.

101
00:04:11,640 --> 00:04:14,080
And you can see how iteration's
a nice way of

102
00:04:14,080 --> 00:04:14,710
thinking about it.

103
00:04:14,710 --> 00:04:18,649
That loop actually captures what
the changes in the state

104
00:04:18,649 --> 00:04:20,480
variables are at each point.

105
00:04:20,480 --> 00:04:22,070
And if we wanted to try it,
we could certainly go

106
00:04:22,070 --> 00:04:25,830
over here to Python.

107
00:04:25,830 --> 00:04:27,980
And there is my definition
of iterMul.

108
00:04:27,980 --> 00:04:36,500
And if I load it into an IDLE
environment, then I can

109
00:04:36,500 --> 00:04:38,990
certainly say things like,
give me the iterative

110
00:04:38,990 --> 00:04:42,800
multiplication of 3 and 5, and
it does the right thing.

111
00:04:42,800 --> 00:04:46,070
And I can even be more fancy
about it and say things like--

112
00:04:46,070 --> 00:04:49,325

113
00:04:49,325 --> 00:04:51,360
And it does it pretty quickly.

114
00:04:51,360 --> 00:04:53,350
We haven't shown out the
intermediate stages of the

115
00:04:53,350 --> 00:04:55,790
loop, but you've seen enough
examples of this to realize

116
00:04:55,790 --> 00:04:59,030
that it is, in fact, doing that
counting down of b while

117
00:04:59,030 --> 00:05:01,060
accumulating the results
in result and then

118
00:05:01,060 --> 00:05:02,770
returning the value.

119
00:05:02,770 --> 00:05:04,020
Great.

120
00:05:04,020 --> 00:05:04,320

